diff -ruN gcc-4.1.2/config.sub gcc-4.1.2-winelf/config.sub
--- gcc-4.1.2/config.sub	2005-12-16 04:57:40.000000000 -0800
+++ gcc-4.1.2-winelf/config.sub	2007-03-09 10:17:20.000000000 -0800
@@ -1194,7 +1194,7 @@
 	      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \
 	      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \
 	      | -chorusos* | -chorusrdb* \
-	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \
+	      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* | -win32elf* \
 	      | -mingw32* | -linux-gnu* | -linux-uclibc* | -uxpv* | -beos* | -mpeix* | -udk* \
 	      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \
 	      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \
diff -ruN gcc-4.1.2/fixincludes/configure gcc-4.1.2-winelf/fixincludes/configure
--- gcc-4.1.2/fixincludes/configure	2005-07-16 07:17:51.000000000 -0700
+++ gcc-4.1.2-winelf/fixincludes/configure	2007-03-09 16:05:29.000000000 -0800
@@ -2563,6 +2563,7 @@
   case $host in
 	i?86-*-msdosdjgpp* | \
 	i?86-*-mingw32* | \
+        i?86-*-win32elf* | \
 	*-*-beos* )
 		TARGET=twoprocess
 		;;
diff -ruN gcc-4.1.2/fixincludes/configure.ac gcc-4.1.2-winelf/fixincludes/configure.ac
--- gcc-4.1.2/fixincludes/configure.ac	2005-07-16 07:17:51.000000000 -0700
+++ gcc-4.1.2-winelf/fixincludes/configure.ac	2007-03-09 16:05:20.000000000 -0800
@@ -49,6 +49,7 @@
 [case $host in
 	i?86-*-msdosdjgpp* | \
 	i?86-*-mingw32* | \
+        i?86-*-win32elf* | \
 	*-*-beos* )
 		TARGET=twoprocess
 		;;
diff -ruN gcc-4.1.2/fixincludes/mkfixinc.sh gcc-4.1.2-winelf/fixincludes/mkfixinc.sh
--- gcc-4.1.2/fixincludes/mkfixinc.sh	2004-11-23 14:45:53.000000000 -0800
+++ gcc-4.1.2-winelf/fixincludes/mkfixinc.sh	2007-03-09 15:54:32.000000000 -0800
@@ -23,6 +23,7 @@
     i?86-*-mingw32* | \
     i?86-*-uwin* | \
     i?86-*-interix* | \
+    i?86-*-win32elf* | \
     powerpc-*-eabiaix* | \
     powerpc-*-eabisim* | \
     powerpc-*-eabi*    | \
diff -ruN gcc-4.1.2/gcc/config/i386/win32elf.h gcc-4.1.2-winelf/gcc/config/i386/win32elf.h
--- gcc-4.1.2/gcc/config/i386/win32elf.h	1969-12-31 16:00:00.000000000 -0800
+++ gcc-4.1.2-winelf/gcc/config/i386/win32elf.h	2007-03-09 10:54:21.000000000 -0800
@@ -0,0 +1,147 @@
+/* Target definitions for GCC for Intel 80386 using ELF
+   Copyright (C) 1988, 1991, 1995, 2000, 2001, 2002
+   Free Software Foundation, Inc.
+
+   Derived from i386elf.h and mingw32.h
+   i386elf.h was derived from sysv4.h written by Ron Guilmette (rfg@netcom.com).
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING.  If not, write to
+the Free Software Foundation, 51 Franklin Street, Fifth Floor,
+Boston, MA 02110-1301, USA.  */
+
+/* Use stabs instead of DWARF debug format.  */
+#undef  PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
+
+#define TARGET_VERSION fprintf (stderr, " (x86 Win32 ELF)");
+
+/* See i386/crtdll.h for an alternative definition.  */
+#define TARGET_OS_CPP_BUILTINS()				\
+  do								\
+    {								\
+      builtin_define ("__MSVCRT__");				\
+      builtin_define ("__MINGW32__");			   	\
+      builtin_define ("_WIN32");				\
+      builtin_define ("__WIN32");				\
+      builtin_define_std ("WIN32");				\
+      builtin_define_std ("WINNT");				\
+    }								\
+  while (0)
+
+/* By default, target has a 80387, uses IEEE compatible arithmetic,
+   and returns float values in the 387.  */
+
+#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)
+
+/* The ELF ABI for the i386 says that records and unions are returned
+   in memory.  */
+
+#undef RETURN_IN_MEMORY
+#define RETURN_IN_MEMORY(TYPE) \
+  (TYPE_MODE (TYPE) == BLKmode \
+   || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))
+
+#undef CPP_SPEC
+#define CPP_SPEC ""
+
+#define ENDFILE_SPEC "crtend.o%s crtn.o%s"
+
+#define STARTFILE_SPEC "%{!shared: \
+			 %{!symbolic: \
+			  %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\
+                        crt1.o%s\
+			crtbegin.o%s"
+
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(n) \
+  (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])
+
+/* The routine used to output sequences of byte values.  We use a special
+   version of this for most svr4 targets because doing so makes the
+   generated assembly code more compact (and thus faster to assemble)
+   as well as more readable.  Note that if we find subparts of the
+   character sequence which end with NUL (and which are shorter than
+   STRING_LIMIT) we output those using ASM_OUTPUT_LIMITED_STRING.  */
+
+#undef ASM_OUTPUT_ASCII
+#define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)				\
+  do									\
+    {									\
+      const unsigned char *_ascii_bytes =				\
+        (const unsigned char *) (STR);					\
+      const unsigned char *limit = _ascii_bytes + (LENGTH);		\
+      unsigned bytes_in_chunk = 0;					\
+      for (; _ascii_bytes < limit; _ascii_bytes++)			\
+        {								\
+	  const unsigned char *p;					\
+	  if (bytes_in_chunk >= 64)					\
+	    {								\
+	      fputc ('\n', (FILE));					\
+	      bytes_in_chunk = 0;					\
+	    }								\
+	  for (p = _ascii_bytes; p < limit && *p != '\0'; p++)		\
+	    continue;							\
+	  if (p < limit && (p - _ascii_bytes) <= (long) STRING_LIMIT)	\
+	    {								\
+	      if (bytes_in_chunk > 0)					\
+		{							\
+		  fputc ('\n', (FILE));					\
+		  bytes_in_chunk = 0;					\
+		}							\
+	      ASM_OUTPUT_LIMITED_STRING ((FILE), _ascii_bytes);		\
+	      _ascii_bytes = p;						\
+	    }								\
+	  else								\
+	    {								\
+	      if (bytes_in_chunk == 0)					\
+		fprintf ((FILE), "\t.byte\t");				\
+	      else							\
+		fputc (',', (FILE));					\
+	      fprintf ((FILE), "0x%02x", *_ascii_bytes);		\
+	      bytes_in_chunk += 5;					\
+	    }								\
+	}								\
+      if (bytes_in_chunk > 0)						\
+        fprintf ((FILE), "\n");						\
+    }									\
+  while (0)
+
+#define LOCAL_LABEL_PREFIX	"."
+
+/* Switch into a generic section.  */
+#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section
+
+/* If defined, a C expression whose value is a string containing the
+   assembler operation to identify the following data as
+   uninitialized global data.  If not defined, and neither
+   `ASM_OUTPUT_BSS' nor `ASM_OUTPUT_ALIGNED_BSS' are defined,
+   uninitialized global data will be output in the data section if
+   `-fno-common' is passed, otherwise `ASM_OUTPUT_COMMON' will be
+   used.  */
+#undef BSS_SECTION_ASM_OP
+#define BSS_SECTION_ASM_OP "\t.section\t.bss"
+
+/* Like `ASM_OUTPUT_BSS' except takes the required alignment as a
+   separate, explicit argument.  If you define this macro, it is used
+   in place of `ASM_OUTPUT_BSS', and gives you more flexibility in
+   handling the required alignment of the variable.  The alignment is
+   specified as the number of bits.
+
+   Try to use function `asm_output_aligned_bss' defined in file
+   `varasm.c' when defining this macro.  */
+#undef ASM_OUTPUT_ALIGNED_BSS
+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \
+  asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)
diff -ruN gcc-4.1.2/gcc/config.gcc gcc-4.1.2-winelf/gcc/config.gcc
--- gcc-4.1.2/gcc/config.gcc	2006-10-15 16:12:23.000000000 -0700
+++ gcc-4.1.2-winelf/gcc/config.gcc	2007-03-09 10:07:30.000000000 -0800
@@ -1268,6 +1268,11 @@
 		tm_file="${tm_file} dbxcoff.h"
 	fi
 	;;
+i[34567]86-*-win32elf*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/win32elf.h"
+	tmake_file="i386/t-i386elf t-svr4"
+	use_fixproto=yes
+	;;
 i[34567]86-*-kaos*)
 	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h kaos.h i386/kaos-i386.h"
 	tmake_file="i386/t-i386elf t-svr4"
diff -ruN gcc-4.1.2/libiberty/configure gcc-4.1.2-winelf/libiberty/configure
--- gcc-4.1.2/libiberty/configure	2005-07-21 20:14:38.000000000 -0700
+++ gcc-4.1.2-winelf/libiberty/configure	2007-03-09 16:59:10.000000000 -0800
@@ -8083,7 +8083,7 @@
 
 # Figure out which version of pexecute to use.
 case "${host}" in
-     *-*-mingw* | *-*-winnt*)	pexecute=./pex-win32.o  ;;
+     *-*-mingw* | *-*-winnt* | *-*-win32elf*)	pexecute=./pex-win32.o  ;;
      *-*-msdosdjgpp*)		pexecute=./pex-djgpp.o  ;;
      *-*-msdos*)		pexecute=./pex-msdos.o  ;;
      *)				pexecute=./pex-unix.o   ;;
diff -ruN gcc-4.1.2/libiberty/configure.ac gcc-4.1.2-winelf/libiberty/configure.ac
--- gcc-4.1.2/libiberty/configure.ac	2005-07-21 20:14:38.000000000 -0700
+++ gcc-4.1.2-winelf/libiberty/configure.ac	2007-03-09 16:58:46.000000000 -0800
@@ -595,7 +595,7 @@
 
 # Figure out which version of pexecute to use.
 case "${host}" in
-     *-*-mingw* | *-*-winnt*)	pexecute=./pex-win32.o  ;;
+     *-*-mingw* | *-*-winnt* | *-*-win32elf*)	pexecute=./pex-win32.o  ;;
      *-*-msdosdjgpp*)		pexecute=./pex-djgpp.o  ;;
      *-*-msdos*)		pexecute=./pex-msdos.o  ;;
      *)				pexecute=./pex-unix.o   ;;
